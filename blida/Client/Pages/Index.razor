@page "/"
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject GrpcChannel Channel

<div class="row m-0">
    <div id="anim-plot" class="col p-0"></div>
</div>
<style>
    #anim-plot {
        height: calc(100vh - 80px);
    }
</style>

@code {
    object Options = new
    {
        displayModeBar = false,
        responsive = true
    };
    object Attribs = new
    {
    };
    object Frames = new
    {
        transition = new
        {
            duration = 1500,
            easing = "cubic-in-out",
        },
        frame = new
        {
            duration = 1500
        }
    };
    async Task UpdatePlot()
    {
        var client = new WeatherForecast.WeatherForecastClient(Channel);
        int i = 0;
        while (true)
        {
            var plot = client.GetAnimatedGraph(new GraphRequest { LastLocation = i });

            await plot.ResponseStream.MoveNext(default(CancellationToken));
            var data = Compressor.Unpack<object>(plot.ResponseStream.Current.Data.ToArray());
            var layout = Compressor.Unpack<object>(plot.ResponseStream.Current.Layout.ToArray());
            await JS.InvokeVoidAsync("window.plot.line", "anim-plot",
                data, layout, Options);

            while (await plot.ResponseStream.MoveNext(default(CancellationToken)))
            {
                data = Compressor.Unpack<object>(plot.ResponseStream.Current.Data.ToArray());

                try
                {
                    await JS.InvokeVoidAsync("window.plot.animate", "anim-plot",
                        data, Frames, Attribs);
                } catch { }
            }
            await Task.Delay(4000);
            await JS.InvokeVoidAsync("window.plot.purge", "anim-plot");
            i = ++i % 4;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await UpdatePlot();
    }
}
